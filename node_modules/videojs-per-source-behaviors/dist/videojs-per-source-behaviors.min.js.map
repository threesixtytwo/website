{"version":3,"sources":["node_modules/videojs-spellbook/node_modules/browserify/node_modules/browser-pack/_prelude.js","src/js/index.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","videojsPerSourceBehaviors","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","videojs","ex","_typeof","Html5","getTech","registerPlugin","plugin","CHANGE_DETECT_EVENTS","UNSTABLE_EVENTS","AD_STATES","perSourceBehaviors","_this","perSrcListeners","cachedSrc","_disabled","srcChangeTimer","srcStable","isInAdPlayback","ads","indexOf","state","createPerSrcBinder","isOne","first","second","_this2","disabled","isTargetPlayer","arguments","originalSrc","currentSrc","args","originalListener","bind","wrappedListener","changed","off","apply","undefined","guid","push","on","disable","clearTimeout","enable","enabled","isSrcStable","VERSION","onPerSrc","onePerSrc","type","trigger","interimEvents","addInterimEvent","time","Date","now","event","Events","setTimeout","forEach","from","to"],"mappings":"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","file":"/Users/poneill/dev/videojs-per-source-behaviors/dist/videojs-per-source-behaviors.min.js","sourceRoot":"","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar videojs = _interopDefault(require('video.js'));\n\nconst Html5 = videojs.getTech('Html5');\n\n// Video.js 5/6 cross-compatibility.\nconst registerPlugin = videojs.registerPlugin || videojs.plugin;\n\n/**\n * For the most part, these are the events that occur early in the lifecycle\n * of a source, but there is considerable variability across browsers and\n * devices (not to mention properties like autoplay and preload). As such, we\n * listen to a bunch of events for source changes.\n *\n * @type {Array}\n */\nconst CHANGE_DETECT_EVENTS = [\n  'abort',\n  'emptied',\n  'loadstart',\n  'play'\n];\n\n/**\n * These events will indicate that the source is \"unstable\" (i.e. it might be\n * about to change).\n *\n * @type {Array}\n */\nconst UNSTABLE_EVENTS = [\n  'abort',\n  'emptied'\n];\n\n/**\n * These are the ad loading and playback states we care about.\n *\n * @type {Array}\n */\nconst AD_STATES = [\n  'ad-playback',\n  'ads-ready?',\n  'postroll?',\n  'preroll?'\n];\n\n/**\n * Applies per-source behaviors to a video.js Player object.\n */\nconst perSourceBehaviors = function() {\n  const perSrcListeners = [];\n  let cachedSrc;\n  let disabled = false;\n  let srcChangeTimer;\n  let srcStable = true;\n\n  /**\n   * Whether or not the player is in an ad state. Ideally, this function would\n   * not need to exist, but hooks provided by contrib-ads are not sufficient to\n   * cover all conditions at this time.\n   *\n   * @return {boolean}\n   *         whether the player is in an ad state or not\n   */\n  const isInAdPlayback = () =>\n    !!this.ads && typeof this.ads === 'object' && AD_STATES.indexOf(this.ads.state) > -1;\n\n  /**\n   * Creates an event binder function of a given type.\n   *\n   * @param  {boolean} isOne\n   *         Rather than delegating to the player's `one()` method, we want to\n   *         retain full control over when the listener is unbound (particularly\n   *         due to the ability for per-source behaviors to be toggled on and\n   *         off at will).\n   *\n   * @return {Function}\n   *         the per source binder function\n   */\n  const createPerSrcBinder = (isOne) => {\n    return function(first, second) {\n\n      // Do not bind new listeners when per-source behaviors are disabled.\n      if (this.perSourceBehaviors.disabled()) {\n        return;\n      }\n\n      const isTargetPlayer = arguments.length === 2;\n      const originalSrc = this.currentSrc();\n\n      // This array is the set of arguments to use for `on()` and `off()` methods\n      // of the player.\n      const args = [first];\n\n      // Make sure we bind here so that a GUID is set on the original listener\n      // and that it is bound to the proper context.\n      const originalListener = videojs.bind(\n        isTargetPlayer ? this : first,\n        arguments[arguments.length - 1]\n      );\n\n      // The wrapped listener `subargs` are the arguments passed to the original\n      // listener (i.e. the Event object and an additional data hash).\n      const wrappedListener = (...subargs) => {\n        const changed = this.currentSrc() !== originalSrc;\n\n        // Do not evaluate listeners if per-source behaviors are disabled.\n        if (this.perSourceBehaviors.disabled()) {\n          return;\n        }\n\n        if (changed || isOne) {\n          this.off(...args);\n        }\n\n        if (!changed) {\n          originalListener(...subargs);\n        }\n      };\n\n      // Make sure the wrapped listener and the original listener share a GUID,\n      // so that video.js properly removes event bindings when `off()` is passed\n      // the original listener!\n      wrappedListener.guid = originalListener.guid;\n\n      // If we are targeting a different object from the player, we need to include\n      // the second argument.\n      if (!isTargetPlayer) {\n        args.push(second);\n      }\n\n      args.push(wrappedListener);\n      perSrcListeners.push(args);\n\n      return this.on(...args);\n    };\n  };\n\n  this.perSourceBehaviors = {\n\n    /**\n     * Disable per-source behaviors on this player.\n     *\n     * @return {boolean}\n     */\n    disable: videojs.bind(this, function disable() {\n      this.clearTimeout(srcChangeTimer);\n      srcChangeTimer = null;\n      disabled = true;\n      return disabled;\n    }),\n\n    /**\n     * Whether per-source behaviors are disabled on this player.\n     *\n     * @return {boolean}\n     *         if the per-source behaviors are disabled\n     */\n    disabled() {\n      return disabled;\n    },\n\n    /**\n     * Enable per-source behaviors on this player.\n     *\n     * @return {boolean}\n     *         always returns true\n     */\n    enable() {\n      disabled = false;\n      return disabled;\n    },\n\n    /**\n     * Whether per-source behaviors are disabled on this player.\n     *\n     * @return {boolean}\n     *         if the per-source behaviors are enabled\n     */\n    enabled() {\n      return !disabled;\n    },\n\n    /**\n     * Whether or not the source is \"stable\". This will return `true` if the\n     * plugin feels that we may be about to change sources.\n     *\n     * @return {boolean}\n     *         Whether the source is stable or not\n     */\n    isSrcStable() {\n      return srcStable;\n    },\n\n    VERSION: '__VERSION__'\n  };\n\n  /**\n   * Bind an event listener on a per-source basis.\n   *\n   * @function onPerSrc\n   * @param  {String|Array|Component|Element} first\n   *         The event type(s) or target Component or Element.\n   *\n   * @param  {Function|String|Array} second\n   *         The event listener or event type(s) (when `first` is target).\n   *\n   * @param  {Function} third\n   *         The event listener (when `second` is event type(s)).\n   *\n   * @return {Player}\n   */\n  this.onPerSrc = createPerSrcBinder();\n\n  /**\n   * Bind an event listener on a per-source basis. This listener can only\n   * be called once.\n   *\n   * @function onePerSrc\n   * @param  {String|Array|Component|Element} first\n   *         The event type(s) or target Component or Element.\n   *\n   * @param  {Function|String|Array} second\n   *         The event listener or event type(s) (when `first` is target).\n   *\n   * @param  {Function} third\n   *         The event listener (when `second` is event type(s)).\n   *\n   * @return {Player}\n   */\n  this.onePerSrc = createPerSrcBinder(true);\n\n  // Clear out perSrcListeners cache on player dispose.\n  this.on('dispose', () => {\n    perSrcListeners.length = 0;\n  });\n\n  this.on(CHANGE_DETECT_EVENTS, (e) => {\n\n    // Bail-out conditions.\n    if (\n      this.perSourceBehaviors.disabled() ||\n      srcChangeTimer ||\n      isInAdPlayback(this)\n    ) {\n      return;\n    }\n\n    // If we did not previously detect that we were in an unstable state and\n    // this was an event that qualifies as unstable, do that now. In the future,\n    // we may want to restrict the conditions under which this is triggered by\n    // checking networkState and/or readyState for reasonable values such as\n    // NETWORK_NO_SOURCE and HAVE_NOTHING.\n    if (\n      srcStable &&\n      UNSTABLE_EVENTS.indexOf(e.type) > -1\n    ) {\n      srcStable = false;\n      this.trigger('sourceunstable');\n    }\n\n    // Track any and all interim events from this one until the next tick\n    // when we evaluate the timer.\n    const interimEvents = [];\n\n    const addInterimEvent = (f) =>\n      interimEvents.push({time: Date.now(), event: f});\n\n    addInterimEvent(e);\n    this.on(Html5.Events, addInterimEvent);\n\n    srcChangeTimer = this.setTimeout(() => {\n      const currentSrc = this.currentSrc();\n\n      srcStable = true;\n      srcChangeTimer = null;\n      this.off(Html5.Events, addInterimEvent);\n\n      if (currentSrc && currentSrc !== cachedSrc) {\n\n        // Remove per-source listeners explicitly when we know the source has\n        // changed before we trigger the \"sourcechanged\" listener.\n        perSrcListeners.forEach(args => this.off(...args));\n        perSrcListeners.length = 0;\n\n        this.trigger('sourcechanged', {\n          interimEvents,\n          from: cachedSrc,\n          to: currentSrc\n        });\n\n        cachedSrc = currentSrc;\n      }\n    }, 1);\n  });\n};\n\nregisterPlugin('perSourceBehaviors', perSourceBehaviors);\nperSourceBehaviors.VERSION = '__VERSION__';\n\nmodule.exports = perSourceBehaviors;\n"]}